* mu4e-notifications
This document describes a method to enable desktop notifications that open the message to which they are associated in mu4e. Since you are an emacs user, I recommend that you read this guide as an org-mode file. Get the org-mode version of this document [[https://raw.githubusercontent.com/IvanMalison/mu4e-notifications/master/mu4e-notifications.org][here]]. 

** Assumptions/Dependencies
*** mu/mu4e
    You can get mu with mu4e from homebrew using:
#+BEGIN_SRC sh
  brew install mu --with-emacs
#+END_SRC
Make sure to add the mu4e source directory to your load path. If you installed using homebrew, you can use the following snippet to do so:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
   (concat (replace-regexp-in-string "\n" "" (shell-command-to-string "echo $(brew --prefix mu)"))
           "/share/emacs/site-lisp/mu4e"))
  (require 'mu4e)
#+END_SRC
If you use jwiegley's use-package instead of a raw require, make sure that ~mu4e-view-message-with-msgid~ triggers the loading of mu4e.
insert link about mu4e configuration

*** terminal-notifier
    Which means that this guide is OSX (10.9+ since advanced terminal-notifier features are used) specific (though it should be relatively easy to generalize this procedure to other environments like Linux with GNOME or KDE). You can install terminal-notifier with homebrew:
#+BEGIN_SRC sh
  brew install terminal-notifier
#+END_SRC
*** Cocoa emacs, emacsclient
    This method talks to emacs using emacsclient -e to execute code in the emacs session, which requires that you run your emacs session using ~emacs --daemon~ (or using ~M-x start-server~ once emacs is already started) and ~emacsclient~. You should already be doing this anyway.
    Cocoa emacs, though not strictly required, is needed in order to provide a bundle target to terminal-notifier to switch the focus to.
*** reattach-to-user-namespace
    This is needed to be able to send notifications from a process that was started outside of the user's GUI login session in MacOSX. You can also get this from homebrew
#+BEGIN_SRC sh
  brew install reattach-to-user-namespace
#+END_SRC
*** Maildir synchronization system
    The author currently uses offlineimap, but using another system (such as mbsync/isync) should be as simple as changing an environment variable. You can get both offlineimap and isync from homebrew:
#+BEGIN_SRC sh
  brew install offlineimap
#+END_SRC
** Setup
*** Talking to emacs
Ensure that you can talk to your running emacs instance using emacsclient. Choose one of the two following methods:
**** Using emacsclient by itself
If you prefer not to use ~server-use-tcp~ (as described below) you must define the shell function ~execute_elisp~ to run code in your existing emacs session. Typically, this will simply look like 
#+BEGIN_SRC sh
alias execute_elisp='emacsclient -e'
#+END_SRC
**** Using server-file-name and server-use-tcp
The author puts the following:
#+BEGIN_SRC elisp
  (setq server-use-tcp t)
#+END_SRC
in their emacs configuration, which makes it so that when ~emacs --daemon=server-file-name~ is used to start the emacs daemon, a server-file with the name ~server-file-name~ is added to ~$HOME/.emacs.d/server~. If you do this, you can use the following functions to communicate with your emacs instances:
#+BEGIN_SRC sh
  function execute_elisp {
      emacs_get_running_instances | xargs -I svr-filename emacsclient --server-file=svr-filename -e "$1"
  }

  function emacs_pids {
      # If -i causes errors (as it can with some versions of pgrep), you can use
      # ps aux | grep emacs | grep -v grep | awk '{print $2}'
      pgrep -i emacs
  }

  function emacs_get_running_instances {
      emacs_pids | xargs ps -o command -p | egrep -o " --daemon=(.*)" | awk -F= '{print $2}' | sed 's/\^J3,4\^J//'
  }
#+END_SRC
See [[https://raw.githubusercontent.com/IvanMalison/dotfiles/master/dotfiles/lib/shellenv/emacs.sh][my emacs shell functions]] for more details about how to get this type of setup working.
*** Alerting
Add the following functions to your shells configuration file (~.bashrc~ if you use bash), or otherwise make them accesible from your shell of choice:
#+BEGIN_SRC sh
  MAILDIR="$HOME/Mail/INBOX"
  SYNC_STAMP="$HOME/.mail-sync"
  APP_ICON="$HOME/gmail_logo.png" 
  SYNC_COMMAND="offlineimap"

  function mu4e_update_mail {
      $SYNC_COMMAND
      mu4e_update_index
      mu4e_alerts
  }

  function mu4e_alert_for_filename {
      local message="$(mu view $1 | grep -B 10 Date)"
      local title="$(echo $message | grep From | sed 's/From: //')"
      local subject="$(echo $message | grep Subject | sed 's/Subject: //')"
      local mu4e_message_id="$(mu4e_get_msg_id_from_file $1)"
      local view_file_command="$(which zsh) -c \"refresh_config && mu4e_view_message $mu4e_message_id\""
      local app_icon_argument=''
      test -e "$APP_ICON" && app_icon_argument="-appIcon '$APP_ICON'"
      reattach-to-user-namespace $(which terminal-notifier) \
          -title "$title" \
          -message "$subject" \
          -execute "$view_file_command" \
          -activate "org.gnu.Emacs" \
          $app_icon_argument
  }

  function mu4e_update_index {
      execute_elisp "(mu4e-update-index)"
  }

  function mu4e_alerts {
      test -e $SYNC_STAMP || touch $SYNC_STAMP
      touch "${SYNC_STAMP}.in-progress"
      for f in $(find "$MAILDIR" -cnewer "$SYNC_STAMP" -a -type f); do
          mu4e_alert_for_filename $f
      done
      mv "${SYNC_STAMP}.in-progress" $SYNC_STAMP
  }

  function mu4e_get_msg_id_from_file {
      mu view $1 -o sexp | grep "message-id" | awk '{print $2}' | sed 's/"//g'
  }

  function mu4e_view_message_from_file {
      mu4e_view_message "$(mu4e_get_msg_id_from_file $1)"
  }

  function mu4e_view_message {
      execute_elisp "(mu4e-view-message-with-msgid \"$1\")"
  }
#+END_SRC
Make sure to configure the ~MAILDIR~ and ~SYNC_COMMAND~ environment variables to match your configuration. Also, make sure that ~execute_elisp~, the function defined in the previous section is available whenever these functions are called.
**** Testing alerting
     To make sure that everything is working, send yourself some mail that will end up in whatever you set as ~$MAILDIR~, and run the ~mu4e_update_mail~ command. You should see some notification center popups. Don't try clicking on them just yet.

*** mu4e Patch
Until [[https://github.com/djcb/mu/issues/547][this issue]] is resolved, you need to patch ~mu4e-view~ so that it displays the messages that are requested from outside of emacs properly.
#+BEGIN_SRC emacs-lisp
  (defun mu4e-view (msg headersbuf)
    "Display the message MSG in a new buffer, and keep in sync with HDRSBUF.
  'In sync' here means that moving to the next/previous message in
  the the message view affects HDRSBUF, as does marking etc.
   
  As a side-effect, a message that is being viewed loses its 'unread'
  marking if it still had that."
    (let* ((embedded ;; is it as an embedded msg (ie. message/rfc822 att)?
             (when (gethash (mu4e-message-field msg :path)
                     mu4e~path-parent-docid-map) t))
            (buf
              (if embedded
                (mu4e~view-embedded-winbuf)
                (get-buffer-create mu4e~view-buffer-name))))
      ;; note: mu4e~view-mark-as-read will pseudo-recursively call mu4e-view again
      ;; by triggering mu4e~view again as it marks the message as read
      (with-current-buffer buf
        (switch-to-buffer buf)
        (setq mu4e~view-msg msg)
        ;;                           |
        ;; This is the relevant line v
        (when t ;;(or embedded (not (mu4e~view-mark-as-read msg)))
          (let ((inhibit-read-only t))
            (erase-buffer)
            (mu4e~delete-all-overlays)
            (insert (mu4e-view-message-text msg))
            (goto-char (point-min))
            (mu4e~fontify-cited)
            (mu4e~fontify-signature)
            (mu4e~view-make-urls-clickable)       
            (mu4e~view-show-images-maybe msg)
            (setq
              mu4e~view-buffer buf
              mu4e~view-headers-buffer headersbuf)
            (when embedded (local-set-key "q" 'kill-buffer-and-window))
            (mu4e-view-mode))))))
#+END_SRC
**** Testing alerting
     Test alerting as before, but this time click on one of the notifications. The operating systems focus should be shifted to emacs, and the relevant email should be displayed.
*** Make a LaunchAgent
Save the following to ~$HOME/Library/LaunchAgents/org.imalison.mu4e-update-mail~ (make sure to give it ~chmod 644~ permissions)
#+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
      <key>Label</key>
      <string>org.imalison.mu4e-update-mail</string>
      <key>ProgramArguments</key>
      <array>
        <string>zsh</string>
        <string>-c</string>
          <string>source ~/.zshrc && mu4e_update_mail</string>
      </array>
      <key>StartInterval</key>
      <integer>30</integer>
      <key>StandardOutPath</key>
      <string>/tmp/org.imalison.mu4e-update-mail.out</string>
      <key>StandardErrorPath</key>
      <string>/tmp/org.imalison.mu4e-update-mail.error</string>
  </dict>
  </plist>
#+END_SRC

Typically, you need to log in and log out to have launchd load a new launchagent. You can also use the following functions to reload any launchagent:
#+BEGIN_SRC sh
  function as_user {
      local user="$1"
      local user_pid=$(ps -axj | awk "/^$user / {print \$2;exit}")
      local command="sudo /bin/launchctl bsexec $user_pid sudo -u '$user' $2"
      eval $command
  }

  function as_current_user {
      as_user "$(whoami)" "$*"
  }

  function reload_user_agent {
      as_current_user /bin/launchctl unload "$1"
      as_current_user /bin/launchctl load "$1"
  }
#+END_SRC
